pipeline {
  agent any
  environment {
    buildnumber = "${env.BUILD_NUMBER}"
    branchname = "master"
   // SONAR_TOKEN = sonarqube('sonarqube_token')
  }
  tools{
  jdk 'Java_17'
  maven 'mvn'
  }
  stages {
    stage("Clean workspace") {
      steps {
          cleanWs()
      }
      }
    stage("Checkout the Project") {
       steps{
            catchError(buildResult: 'success', stageResult: 'FAILURE') {
            git branch: "${branchname}", credentialsId: 'bala_git_creds', url: 'https://github.com/balavu/sample-spring-microservices-kubernetes.git'
            sh '''
                ls -la
               '''
                }
            }
        }

    stage('Build'){
        steps{
          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS_Creds', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]){
          script{
          dir('admin-service'){
            sh "mvn clean install"
           }
          }
        }
      }
    }
    
    stage("SCA") {
            steps {
              dir('admin-service'){
                dependencyCheck additionalArguments: '--format XML', odcInstallation: 'OWASP-DC'
            }
        }
    }

   stage ('SAST') {
            steps {
              dir('admin-service') {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_TOKEN')]) {
                withSonarQubeEnv('sonarqube') {
                sh "mvn clean verify sonar:sonar \
                  -Dsonar.host.url=http://localhost:9000 \
                  -Dsonar.login=$SONAR_TOKEN \
                  -Dsonar.projectVersion=${BUILD_NUMBER}"
              }
            }
          }
      }
    }    
    stage('Build the Image') {
      steps {
        script {
            dir('admin-service') {
            sh 'docker build -t admin:0.${buildnumber} .'
        }
      }
    }
  }
  stage('Run Application Locally') {
            steps {
                sh '''
                    docker run --net zapnet -d --name admin-instance-${buildnumber} -p 8092:8092 admin:0.${buildnumber}
                '''
            }
        }
   /* stage('Push the Image to Amazon ECR') {
      steps {
        script {
                // Use the stored AWS credentials
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS_Creds', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                // Log in to Amazon ECR
                sh("aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 186294677623.dkr.ecr.ap-south-1.amazonaws.com")
                        
                // Tag Docker image
                sh "docker tag admin:0.${buildnumber} 186294677623.dkr.ecr.ap-south-1.amazonaws.com/admin-service-poc:0.${buildnumber}"
                        
                // Push Docker image
                sh "docker push 186294677623.dkr.ecr.ap-south-1.amazonaws.com/admin-service-poc:0.${buildnumber}"
                    }
                }
            }
        }   
*/
stage('ZAP') {
    steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
            dir('admin-service'){
            // Get the IP address from EC2 metadata
            def ip = sh(script: 'curl http://169.254.169.254/latest/meta-data/local-ipv4', returnStdout: true).trim()
            // Run the ZAP scan
            sh """
                docker run --net zapnet -p 8090:8080 -v \$(pwd):/zap/wrk/:rw --user root -t ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
                    -t http://${ip}:8092 -g gen.conf -x zapreport.xml
            """
            }
          }
        }
    }
}

 stage('Create Project and Push to ArcherySec') {
         steps {
            script {
                dir('admin-service'){
                    withCredentials([string(credentialsId: 'ARCHERY_API_KEY_ID', variable: 'ARCHERY_API_KEY')]){
                    def archeryIP = sh(script: "aws ec2 describe-instances --instance-ids i-0d8bfbb2b6d178141 --query 'Reservations[0].Instances[0].PublicIpAddress' --output text", returnStdout: true).trim()
                    def ARCHERY_URL = "http://${archeryIP}:8000"
                    sh """
                    python3 -m pip install archerysec-cli --force  
                    """
                    def projectName = 'admin-service'
                    def projectDescription = 'adminservice'

                    // Create a project in ArcherySec
                    def projectResponse = sh(script: """
                    /var/lib/jenkins/.local/bin/archerysec-cli -h ${ARCHERY_URL} -t ${ARCHERY_API_KEY} --createproject --project_name "${projectName}" --project_disc "${projectDescription}"
                    """, returnStdout: true).trim()

                    // Parse the response to get the project_id
                    // run the ArcherySec CLI command and store the output
                    def commandOutput = sh(script: """
                        /var/lib/jenkins/.local/bin/archerysec-cli -h ${ARCHERY_URL} -t ${ARCHERY_API_KEY} --createproject --project_name "${projectName}" --project_disc "${projectDescription}"
                    """, returnStdout: true).trim()
                    
                    // use a regex to match the JSON string from the command output
                    def jsonOutput = commandOutput.find(/(\{.*\})/)
                    def projectData = readJSON(text: jsonOutput)
                    def projectId = projectData.project_id                    
                    if (jsonOutput) {
                        echo "Extracted JSON: ${jsonOutput}"
                        // now you can parse the JSON string
                        echo "Project ID: ${projectId}"
                    } else {
                        echo "Failed to extract JSON from command output."
                        currentBuild.result = 'FAILURE'
                    }

                    // Push ZAP report
                    sh """
                    /var/lib/jenkins/.local/bin/archerysec-cli -h ${ARCHERY_URL} -t ${ARCHERY_API_KEY} -p ./zapreport.xml --file-type=XML --target="admin-service" --scanner=zap_scan --project="${projectId}" --upload
                    """
                    // Push DependencyCheck report
                    sh """
                    /var/lib/jenkins/.local/bin/archerysec-cli -h ${ARCHERY_URL} -t ${ARCHERY_API_KEY} -p ./dependency-check-report.xml --file-type=XML --target="admin" --scanner=dependencycheck --project="${projectId}" --upload
                    """
                                        
                }
            }
        }
    }
 }
 /*   stage(' Deploy to EKS '){
    steps{
      script {              
        withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s-deploy', namespace: '', serverUrl: '') {
        dir('admin-service') 
        sh  '''
            kubectl apply -f ./deployment.yaml
            '''
          }                
        }
    }*/
  }
}
